#

# Reset prefix-key
unbind-key C-b

# Set prefix-key C-t
if-shell -b "[ -z $SSH_CONNECTION ]" {
	set-option -g prefix C-t
	set-option -g status-position bottom
	display "prefix Ctrl-t"
	} {
	set-option -g prefix C-b
	set-option -g status-position top
	display "prefix Ctrl-b" } 

set-option -g default-terminal 'screen-256color'

# Use vi key bindings in copy mode.
set-option -g mode-keys vi		
set-option -g mouse on

# Set the base index from which an unused index should be searched when a new window is created.
set-option -g base-index 1
set-option -g renumber-windows on

set-window-option -g pane-base-index 1

# Update the status line every 1 seconds.
set-option -g status-interval 1	

# Set the maximum length of the right/left component of the status line.
set-option -g status-right-length 60
set-option -g status-right '{#H} [%Y-%m-%d(%a) %H:%M]'
set-option -g status-left-length 30
set-option -g status-left '[#[underscore,bold]#S#[default]] ' 

set-option -g message-style fg=colour68,reverse,bg=brightwhite

set-window-option -g window-status-format " #I:[#W] " 
set-window-option -g window-status-current-format "#[reverse,bold]|#F#I:(pane:#P)[#W]|" 

# Set the foreground/background colour in the status.
set-option -g status-fg "colour255"
if-shell -b "[ -z $SSH_CONNECTION ]" {
	set-option -g status-bg colour70
	} {
	set-option -g status-bg colour162 }
# misc
if-shell -b "[ -z $SSH_CONNECTION ]" {
	set-option -g status-justify "left"
	} {
	set-option -g status-justify "centre" }
set-window-option -g window-status-separator " "

# Set monitor activity
set-window-option -g monitor-activity on

####################
#
# PANE Setting
#

set-option -g window-style  'fg=white, bg=colour240'
set-option -g window-active-style 'fg=white, bg=colour235'

bind-key X kill-window
bind-key d detach
bind-key i display-panes
bind-key b break-pane
bind-key r source-file ~/.tmux.conf
bind-key e setw synchronize-panes \; display "synchronize-panes #{?pane_synchronized,on,off}"

bind-key | split-window -h -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"

bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

# Start selection per charactor with 'v'.
bind-key -T copy-mode-vi v   		   send-keys -X begin-selection
# Start selection linewise with 'V'
bind-key -T copy-mode-vi V   		   send-keys -X select-line
# Start selection blockwise with 'C-v'
bind-key -T copy-mode-vi C-v		   send-keys -X rectangle-toggle
# Yank with 'y'
#bind-key -T copy-mode-vi y send-keys -X copy-selection
# Yank lines with 'Y'
bind-key -T copy-mode-vi Y  		   send-keys -X copy-line	
# Put the text after the cursor with 'C-p'
bind-key C-p paste-buffer

## Cooperation with the clipboard
### MacOS
if-shell -b '[ "$(uname)" = "Darwin" ]' {
	#set-option -s copy-command "pbcopy"
	bind-key -T copy-mode-vi y	           send-keys -X copy-pipe-and-cancel "pbcopy" 
	bind-key -T copy-mode-vi Enter		   send-keys -X copy-pipe-and-cancel "pbcopy"
	bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
} {
	#set-option -s copy-command "xsel --clipboard --input"
	bind-key -T copy-mode-vi y	           send-keys -X copy-pipe-and-cancel "xsel --clipboard --input" 
	bind-key -T copy-mode-vi Enter		   send-keys -X copy-pipe-and-cancel "xsel --clipboard --input" 
	bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xsel --clipboard --input" 
}
